/*
 * Copyright (C) 2016 LibreCCM Foundation.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
package org.libreccm.security;

import com.arsdigita.globalization.GlobalizedMessage;

/**
 * Interface to extend by privilege enums of the various modules.
 *
 * @author <a href="mailto:jens.pelzetter@googlemail.com">Jens Pelzetter</a>
 */
public interface Privilege {

    /**
     * Return to non localised key for the privilege. The default implementation
     * uses the {@code toString} method.
     *
     * @return The non localised identifier of the privilege.
     */
    default String getKey() {
        return toString();
    }

    /**
     * An optional prefix for the key to be used to retrieve the localised
     * label. The default implementation returns an empty string.
     *
     * @return An optional prefix for the key.
     */
    default String getPrefix() {
        return "";
    }

    /**
     * Return the localised label for the role. Primarily for use in the user
     * interface. The default implementation the return value
     * {@link #getBundle()} to get the fully qualified name of the bundle to
     * use. The key is generated by joining the return value from {@link #getPrefix()}
     * (if not an empty string) and the return value from {@link #getKey()}. 
     * The separator between prefix and key is a dot.
     *
     * @return The localised label for the privilege.
     */
    default GlobalizedMessage getLabel() {
        final String prefix = getPrefix();
        final String key;
        if (prefix != null && !prefix.isEmpty()) {
            key = String.join(".", getPrefix(), getKey());
        } else {
            key = getKey();
        }

        return new GlobalizedMessage(key, getBundle());
    }

    /**
     * Returns the bundle containing the localised labels for the privileges.
     *
     * @return The fully qualified name of the resource bundle which provides
     *         the localised labels for the privileges.
     */
    String getBundle();

}
