/*
 * Copyright (C) 2021 LibreCCM Foundation.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
package org.librecms.ui.contentsections.documents.relatedinfo;

import org.libreccm.l10n.GlobalizationHelper;
import org.libreccm.l10n.LocalizedString;
import org.librecms.contentsection.AttachmentList;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.inject.Named;

/**
 * Model used by the attachment list details view.
 *
 * @see RelatedInfoStep
 *
 * @author <a href="mailto:jens.pelzetter@googlemail.com">Jens Pelzetter</a>
 */
@RequestScoped
@Named("CmsAttachmentListDetailsModel")
public class AttachmentListDetailsModel {

    /**
     * The {@link GlobalizationHelper} is used here for retrieving some
     * localized values. The purpose of this model is to provide the properties
     * of an {@link AttachmentList} is a form that is directly usable in the
     * template of the details view. The data of the model is provided by the
     * {@link RelatedInfoStep}.
     */
    @Inject
    private GlobalizationHelper globalizationHelper;

    private boolean canEdit;

    /**
     * UUID of the {@link AttachmentList} shown.
     */
    private String uuid;

    /**
     * Name of the {@link AttachmentList} shown.
     */
    private String name;

    /**
     * Preprocessed localized title values of the {@link AttachmentList}. This
     * map is generated by transforming the locales the
     * {@link AttachmentList#title} to a string using {@link Locale#toString()}.
     */
    private Map<String, String> titles;

    /**
     * Preprocessed localized description values of the {@link AttachmentList}.
     * This map is generated by transforming the locales the
     * {@link AttachmentList#description} to a string using
     * {@link Locale#toString()}.
     */
    private Map<String, String> descriptions;

    /**
     * Not used locales for the title. These are the locales returned by
     * {@link GlobalizationHelper#getAvailableLocales()} minus the locales
     * returned by {@link LocalizedString#getAvailableLocales()} for
     * {@link AttachmentList#title}.
     */
    private List<String> unusedTitleLocales;

    /**
     * Not used locales for the description. These are the locales returned by
     * {@link GlobalizationHelper#getAvailableLocales()} minus the locales
     * returned by {@link LocalizedString#getAvailableLocales()} for
     * {@link AttachmentList#description}.
     */
    private List<String> unusedDescriptionLocales;

    public String getUuid() {
        return uuid;
    }

    public void setUuid(final String uuid) {
        this.uuid = uuid;
    }

    public String getName() {
        return name;
    }

    public void setName(final String name) {
        this.name = name;
    }

    public Map<String, String> getTitles() {
        return Collections.unmodifiableMap(titles);
    }

    public void setTitles(final Map<String, String> titles) {
        this.titles = new HashMap<>(titles);
    }

    public Map<String, String> getDescriptions() {
        return Collections.unmodifiableMap(descriptions);
    }

    public void setDescriptions(final Map<String, String> descriptions) {
        this.descriptions = new HashMap<>(descriptions);
    }

    public List<String> getUnusedTitleLocales() {
        return Collections.unmodifiableList(unusedTitleLocales);
    }

    public void setUnusedTitleLocales(final List<String> unusedTitleLocales) {
        this.unusedTitleLocales = new ArrayList<>(unusedTitleLocales);
    }

    public List<String> getUnusedDescriptionLocales() {
        return Collections.unmodifiableList(unusedDescriptionLocales);
    }

    public void setUnusedDescriptionLocales(
        final List<String> unusedDescriptionLocales
    ) {
        this.unusedDescriptionLocales
            = new ArrayList<>(unusedDescriptionLocales);
    }

    public boolean getCanEdit() {
        return canEdit;
    }

    public void setCanEdit(final boolean canEdit) {
        this.canEdit = canEdit;
    }

}
