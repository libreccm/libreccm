/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.librecms.ui.contentsections.documents;

import org.libreccm.l10n.GlobalizationHelper;
import org.librecms.contentsection.ContentItem;
import org.librecms.contentsection.ContentSection;
import org.librecms.contentsection.Folder;

import java.util.ResourceBundle;

import javax.inject.Named;
import javax.transaction.Transactional;
import javax.ws.rs.FormParam;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;

/**
 * A create step for a document/content item. Implementing classes are used as
 * subresources by {@link DocumentController#createDocument(java.lang.String, java.lang.String)
 * }. An implmenting class must be a named CDI bean (annotated with
 * {@link Named}), annotated with the {@link CreatesDocumentOfType} qualifier
 * annotation. The implementing bean must also contain properties annotated with
 * {@link FormParam} for all fields of the create form.
 *
 * @author <a href="mailto:jens.pelzetter@googlemail.com">Jens Pelzetter</a>
 * @param <T> The document type created by the create step.
 */
public interface MvcDocumentCreateStep<T extends ContentItem> {

    /**
     * The document type generated by the create step described by an instance
     * of this class.
     *
     * @return Document type generated.
     */
    Class<T> getDocumentType();

    /**
     * Localized description of the create step. The current locale as returned
     * by {@link GlobalizationHelper#getNegotiatedLocale()} should be used to
     * select the language variant to return.
     *
     * @return The localized description of the create step.
     */
    String getDescription();

    /**
     * Returns {@link ResourceBundle} providing the localized description of the
     * create step.
     *
     * @return The {@link ResourceBundle} providing the localized description of
     *         the create step.
     */
    String getBundle();

    /**
     * The current content section.
     * 
     * @return The current content section.
     */
    ContentSection getContentSection();
    
      /**
     * Convinient method for getting the label of the current content section.
     *
     * @return The label of the current content section.
     */
    String getContentSectionLabel();

    /**
     * Convinient method for getting the title of the current content section.
     *
     * @return The title of the current content section for the current locale.
     */
    String getContentSectionTitle();
    
    /**
     * The current content section is provided by the
     * {@link DocumentController}.
     *
     * @param section The current content section.
     */
    void setContentSection(final ContentSection section);

    /**
     * The parent folder of the new item.
     * 
     * @return The parent folder of the new item.
     */
    Folder getFolder();
    
    /**
     * Gets the path the the parent folder of the new item.
     * 
     * @return The path of the parent folder of the new item.
     */
    String getFolderPath();
    
    /**
     * The parent folder of the new item is provided by the
     * {@link DocumentController}.
     *
     * @param folder The parent folder of the new doucment.
     */
    void setFolder(final Folder folder);

    /**
     * Endpoint displaying the create form.
     *
     * @return The template of the create step.
     */
    @GET
    @Path("/")
    @Transactional(Transactional.TxType.REQUIRED)
    String showCreateForm();

    /**
     * Creates the new document using the values provided in the form
     * parameters.
     *
     * @return A redirect to the new content item.
     */
    @POST
    @Path("/")
    @Transactional(Transactional.TxType.REQUIRED)
    String createContentItem();

}
