/*
 * Copyright (C) 2021 LibreCCM Foundation.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
package org.librecms.ui.contentsections.documents;

import org.libreccm.l10n.GlobalizationHelper;
import org.librecms.contentsection.ContentItem;
import org.librecms.contentsection.ContentSection;
import org.librecms.contentsection.Folder;

import java.util.Map;
import java.util.ResourceBundle;


/**
 * A create step for a document/content item. Implementing classes are MUST be
 * CDI beans (request scope is recommended). They are retrieved by the
 * {@link DocumentController} using CDI. The {@link DocumentController} will
 * first call
 * {@link #setContentSection(org.librecms.contentsection.ContentSection)} and {@link #setFolder(org.librecms.contentsection.Folder)
 * } to provide the current current content section and folder. After that,
 * depending on the request method, either {@link #showCreateStep} or {@link #createItem(javax.ws.rs.core.Form)]
 * will be called.
 *
 * In most cases, {@link AbstractMvcDocumentCreateStep} should be used as
 * base for implementations. {@link AbstractMvcDocumentCreateStep} implements
 * several common operations.
 *
 * @author <a href="mailto:jens.pelzetter@googlemail.com">Jens Pelzetter</a>
 *
 * @param <T> The document type created by the create step.
 */
public interface MvcDocumentCreateStep<T extends ContentItem> {

    /**
     * Return the template for the create step.
     *
     * @return
     */
    String showCreateStep();

    /**
     * Processes the data from the create step form and creates the
     * document/content item.
     *
     * @param formParams The data of the create step form.
     *
     * @return A redirect to the first authoring step of the new document.
     */
    String createItem(Map<String, String[]> formParams);

    /**
     * Should be set by the implementing class to indicate if the current user
     * can create document in the current folder.
     *
     * @return
     */
    boolean getCanCreate();

    /**
     * The document type generated by the create step described by an instance
     * of this class.
     *
     * @return Document type generated.
     */
    String getDocumentType();

    /**
     * Localized description of the create step. The current locale as returned
     * by {@link GlobalizationHelper#getNegotiatedLocale()} should be used to
     * select the language variant to return.
     *
     * @return The localized description of the create step.
     */
    String getDescription();

    /**
     * Returns {@link ResourceBundle} providing the localized description of the
     * create step.
     *
     * @return The {@link ResourceBundle} providing the localized description of
     *         the create step.
     */
    String getBundle();

    /**
     * The locales that can be used for documents.
     *
     * @return The locales that can be used for documents.
     */
    Map<String, String> getAvailableLocales();

    /**
     * The current content section.
     *
     * @return The current content section.
     */
    ContentSection getContentSection();

    /**
     * Convinient method for getting the label of the current content section.
     *
     * @return The label of the current content section.
     */
    String getContentSectionLabel();

    /**
     * Convinient method for getting the title of the current content section.
     *
     * @return The title of the current content section for the current locale.
     */
    String getContentSectionTitle();

    /**
     * The current content section is provided by the
     * {@link DocumentController}.
     *
     * @param section The current content section.
     */
    void setContentSection(final ContentSection section);

    /**
     * Retrieves the workflows available for the current content section.
     *
     * @return A map of the available workflows. The key is the UUID of the
     *         workflow, the value is the name of the workflow.
     */
    Map<String, String> getAvailableWorkflows();

    /**
     * Used by the {@link DocumentController} to provide the available
     * workflows.
     *
     * @param availableWorkflows
     */
    void setAvailableWorkflows(
        final Map<String, String> availableWorkflows);

    /**
     * The parent folder of the new item.
     *
     * @return The parent folder of the new item.
     */
    Folder getFolder();

    /**
     * Gets the path the the parent folder of the new item.
     *
     * @return The path of the parent folder of the new item.
     */
    String getFolderPath();

    /**
     * The parent folder of the new item is provided by the
     * {@link DocumentController}.
     *
     * @param folder The parent folder of the new doucment.
     */
    void setFolder(final Folder folder);

    /**
     * Gets messages from the create step.
     *
     * @return
     */
    Map<String, String> getMessages();

// 
}
